

int f(int idx1,int idx2,string &s1,string &s2,vector<vector<int>>&dp)
{
	if(idx1<0)
		return idx2+1;//if one string goes empty then next is number of idx+1;
	if(idx2<0)
		return idx1+1;
	if(dp[idx1][idx2]!=-1)
		return dp[idx1][idx2];
	if(s1[idx1]==s2[idx2])
	return	 dp[idx1][idx2]= f(idx1-1,idx2-1,s1,s2,dp);
	else
		return dp[idx1][idx2]=1+min(f(idx1-1,idx2,s1,s2,dp),min(f(idx1,idx2-1,s1,s2,dp),f(idx1-1,idx2-1,s1,s2,dp)));
	
	
}
int editDistance(string str1, string str2)
{
	int l1=str1.length();
	int l2=str2.length();
	vector<vector<int>>dp(l1+1,vector<int>(l2+1,0));
	//return f(l1-1,l2-1,str1,str2,dp);
	for(int i=0;i<=l2;i++)
	{
	  dp[0][i]=i;
	}
	for(int i=0;i<=l1;i++)
		dp[i][0]=i;
	for(int i=1;i<=l1;i++)
	{
		for(int j=1;j<=l2;j++)
		{
			if(str1[i-1]==str2[j-1])
				dp[i][j]=dp[i-1][j-1];
			else
			{
				dp[i][j]=1+min(dp[i-1][j],min(dp[i][j-1],dp[i-1][j-1]));
i-1,j is delete,i,j-1 is insert,i-1,j-1 is replace
			}

			}
	}
	return dp[l1][l2];
    
}