ll merge(ll arr[],ll temp[],ll left,ll mid,ll right)
{
    ll i=left;
    ll j=mid;
    ll k=left;
    ll inv=0;
    while(i<mid&&j<=right)
    {
        if(arr[i]<=arr[j])
        {
            temp[k++]=arr[i++];
        }
        else
        {
            temp[k++]=arr[j++];
            inv+=mid-i;
        }
    }
    while(i<mid)
    {
        temp[k++]=arr[i++];
    }
    while(j<=right)
    {
        temp[k++]=arr[j++];
    }
    for(i=left;i<=right;i++)
    arr[i]=temp[i];
    return inv;
}
ll mergeSort(long long arr[],ll temp[],ll left,ll right)
{
        ll mid;
    ll inv=0;
    if(right<=left){
        return 0;}
    mid=left+(right-left)/2;
    inv+=mergeSort(arr,temp,left,mid);
    inv+=mergeSort(arr,temp,mid+1,right);
    inv+=merge(arr,temp,left,mid+1,right);
    return inv;
    
}
long long int inversionCount(long long arr[], long long N)
{
  
    ll temp[N];
    return mergeSort(arr,temp,0,N-1);
}