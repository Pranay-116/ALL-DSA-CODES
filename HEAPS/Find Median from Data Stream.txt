  priority_queue<int>pq1;
    priority_queue<int,vector<int>,greater<int>>pq2;

    
    MedianFinder() {
        
    }
    
    void addNum(int x) {
         if(pq1.size()==0)
        {
            pq1.push(x);
            return;
            
        }
        if(pq1.size()>pq2.size())
        {
            if(x<pq1.top())
            {
                pq2.push(pq1.top());
                pq1.pop();
                pq1.push(x);
                
            }
            else
            pq2.push(x);
        }
        else
        {
            if(x<pq1.top())
            {
                pq1.push(x);
            }
            else
            {
                pq2.push(x);
                pq1.push(pq2.top());
                pq2.pop();
                
            }
        }
        
    }
    
    double findMedian() {
         if(pq1.size()==pq2.size())
       return ((double)pq1.top()+(double)pq2.top())/2.0;
       return (double)pq1.top();
    }